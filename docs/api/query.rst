Query Class
===========

.. py:module:: attachsql

.. py:class:: query


   .. py:method:: column_count()

      Returns the number of columns in a query result

      :return: The number of columns
      :rtype: int

   .. py:method:: row_get()

      Returns a Python tuple containing strings of the row data for the current row

      :return: The row data
      :rtype: tuple

   .. py:method:: row_next()

      Start retrieval of the next row

      :return: ``None``

   .. py:method:: last_insert_id()

      Returns the last insert ID from the previous query

      :return: The insert ID
      :rtype: long

   .. py:method:: affected_rows()

      Returns the number of affected rows from the previous query

      :return: The number of affected rows
      :rtype: long

   .. py:method:: warning_count()

      Returns the number of warnings generated by the last query

      :return: The warning count
      :rtype: long

   .. py:method:: info()

      Returns the info from the last query

      :return: The query info
      :rtype: str

   .. py:method:: row_count()

      Returns the row count for a buffered query

      :return: The row count
      :rtype: long

   .. py:method:: next_result()

      Start retrieval of the next result set in a multi statement / result query

      :return: :py:data:`RETURN_PROCESSING` for more results, :py:data:`RETURN_EOF` for no more results
      :rtype: int

   .. py:method:: buffer_rows()

      Enable row buffering for connection

      :return: ``True`` on success
      :rtype: bool

   .. py:method:: buffer_row_get()

      Return the next row from a buffered result set in a similar way to :py:meth:`row_get`

      :return: The row data
      :rtype: tuple

   .. py:method:: row_get_offset(offset)

      Return a specific row from a buffered result set in a similar way to :py:meth:`row_get`

      :param long offset: The offset row
      :return: The row data
      :rtype: tuple


