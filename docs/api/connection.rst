Connection Class
================

.. py:module:: attachsql

.. py:class:: connection(hostname, user, password, database, port)

   :param str hostname: The hostname to the server
   :param str user: The user name to connect with
   :param str password: The password to connect with
   :param str database: The default database for the connection
   :param int port: The port to connect on or ``0`` for a Unix Domain Socket connection

   .. py:method:: connection_id()

      Returns the connection ID of the connection.  If there is no established connection this will return ``0``.

      :return: The ID for the connection
      :rtype: int

   .. py:method:: connect()

      Start connection to the server.  :py:meth:`poll` needs to be called (usually more than once) for the connection to actually occur.

      :return: ``True`` on success
      :rtype: bool

   .. py:method:: poll()

      Poll a connection to see if there is more data.

      :return: A numeric status to be compared with :ref:`return-constants`
      :rtype: int

   .. py:method:: get_server_version()

      Returns the version string for the server

      :return: The version string
      :rtype: str

   .. py:method:: query(query, [parameters])

      Send a query to the server.  Parameters can be given to fill in ``?`` markers in a query.  This should be in a Python list containing dictionaries formatted as follows as follows:

      .. code-block:: python

         [{'type': attachsql.ESCAPE_TYPE_CHAR, 'data':'hello'}, {'type': attachsql.ESCAPE_TYPE_INT, 'data': 123456, is_unsigned: True}]

      For a full list of types see :ref:`escape-constants`

      :param str query: The query statement to send
      :param list parameters:
      :return: ``True`` on success
      :rtype: bool

   .. py:method:: query_close()

      Closes and cleans up a query when execution has completed

      :return: ``None``

   .. py:method:: query_column_count()

      Returns the number of columns in a query result

      :return: The number of columns
      :rtype: int

   .. py:method:: query_row_get()

      Returns a Python tuple containing strings of the row data for the current row

      :return: The row data
      :rtype: tuple

   .. py:method:: query_row_next()

      Start retrieval of the next row

      :return: ``None``

   .. py:method:: last_insert_id()

      Returns the last insert ID from the previous query

      :return: The insert ID
      :rtype: long

   .. py:method:: affected_rows()

      Returns the number of affected rows from the previous query

      :return: The number of affected rows
      :rtype: long

   .. py:method:: warning_count()

      Returns the number of warnings generated by the last query

      :return: The warning count
      :rtype: long

   .. py:method:: query_info()

      Returns the info from the last query

      :return: The query info
      :rtype: str

   .. py:method:: query_row_count()

      Returns the row count for a buffered query

      :return: The row count
      :rtype: long

   .. py:method:: query_next_result()

      Start retrieval of the next result set in a multi statement / result query

      :return: :py:data:`RETURN_PROCESSING` for more results, :py:data:`RETURN_EOF` for no more results
      :rtype: int

   .. py:method:: query_buffer_rows()

      Enable row buffering for connection

      :return: ``True`` on success
      :rtype: bool

   .. py:method:: query_buffer_row_get()

      Return the next row from a buffered result set in a similar way to :py:meth:`query_row_get`

      :return: The row data
      :rtype: tuple

   .. py:method:: query_row_get_offset(offset)

      Return a specific row from a buffered result set in a similar way to :py:meth:`query_row_get`

      :param long offset: The offset row
      :return: The row data
      :rtype: tuple
